---
import { getCollection } from "astro:content"
// import { t } from "i18next";

interface TagCount {
  tag: string
  count: number
}

export async function getTagsWithCounts(): Promise<TagCount[]> {
  const posts = await getCollection("blog")

  const tagMap = new Map<string, number>()

  posts.forEach((post) => {
    const tags = post.data.tags || []
    tags.forEach((tag) => {
      tagMap.set(tag, (tagMap.get(tag) || 0) + 1)
    })
  })

  return Array.from(tagMap, ([tag, count]) => ({ tag, count }))
}
const tagsWithCounts = await getTagsWithCounts()
---

<div class="w-full p-4 transition-colors">
  <div class="mb-4 px-4">
    <div class="btn btn-sm btn-ghost no-animation w-full font-bold">
      <!-- {t("label.tagCard")} -->
      <!-- ASD -->
      <h2 class="text-2xl xl:text-3xl">Tags</h2>
    </div>
  </div>
  <div class="flex max-h-[300px] w-full flex-wrap gap-2.5 ">
    {
      tagsWithCounts.map(({ tag, count }) => (
        <a
          href={`/blog/tag/${tag}`}
          class="join flex items-center overflow-hidden rounded-lg dark:border-blue-400 backdrop-blur-2xl bg-neutral-100/70 dark:bg-neutral-900/70 shadow-xl"
        >
          <p class="btn btn-xs join-item px-2 py-1 text-base ">{tag}</p>
          <span class="font-extrabold text-blue-500 pb-1 dark:text-blue-400 text-base">â‰Ž</span>
          <p class="btn btn-xs join-item px-2 py-1 text-base font-bold count">
            {count}
          </p>
        </a>
      ))
    }
  </div>
</div>

<style>
  /* a:hover p {
    @apply text-blue-600;
  }
  a:hover span {
    @apply text-black;
  } */
  a {
    @apply hover:-translate-y-1 transition-all duration-200 ease-out;
  }
  p,
  span {
    @apply transition-all duration-150 ease-out;
  }
</style>
